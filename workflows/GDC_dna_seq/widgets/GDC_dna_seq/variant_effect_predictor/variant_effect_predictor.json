{"name": "variant_effect_predictor", "description": "Annotate raw VCF files using Variant Effect Predictor", "docker_image_name": "biodepot/vep", "docker_image_tag": "102.0__ubuntu_18.04__12512944", "priority": "90", "icon": null, "inputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["inputFile", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["fasta", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["vepBaseCacheDir", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["outputFile", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["sniper_trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["varscan_trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["muse_call_trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["pindel_trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["mutect_trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}]}]}, "outputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["outputFile", {"default": null, "type": {"py/type": "builtins.str"}}]}]}]}, "volumes": null, "ports": null, "parameters": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["vepHelp", {"flag": "--help", "label": "Display help message and quit", "type": "bool"}]}, {"py/tuple": ["vepVerbose", {"flag": "--verbose", "label": "Print out verbose information", "type": "bool"}]}, {"py/tuple": ["vepConfig", {"flag": "--config ", "label": "Load configuration options from config file", "type": "file"}]}, {"py/tuple": ["everything", {"flag": "--everything", "label": "Enable switching on additional arguments", "type": "bool"}]}, {"py/tuple": ["species", {"flag": "--species ", "label": "Species for data", "type": "str"}]}, {"py/tuple": ["assembly", {"flag": "--assembly ", "label": "Select the assembly version to use", "type": "str"}]}, {"py/tuple": ["inputFile", {"flag": "-i ", "label": "Input VCF file", "type": "file list"}]}, {"py/tuple": ["inputData", {"flag": "--input_data ", "label": "Raw input data as a string", "type": "str"}]}, {"py/tuple": ["format", {"flag": "--format ", "label": "Input file format", "type": "str"}]}, {"py/tuple": ["outputFile", {"flag": "-o ", "label": "Output file", "type": "file list"}]}, {"py/tuple": ["forceOverwrite", {"flag": "--force", "label": "Force overwrite of existing file", "type": "bool"}]}, {"py/tuple": ["statsFile", {"flag": "--stats_file ", "label": "Summary stats file name", "type": "file"}]}, {"py/tuple": ["noStats", {"flag": "--no_stats", "label": "Do not generate a stats file", "type": "bool"}]}, {"py/tuple": ["statsText", {"flag": "--stats_text", "label": "Generate a plain text stats file in place of the HTML", "type": "bool"}]}, {"py/tuple": ["warningFile", {"flag": "--warning_file ", "label": "File name to write warnings and errors", "type": "file"}]}, {"py/tuple": ["maxSvSize", {"flag": "--max_sv_size", "label": "Extend max Structural Variant size VEP can process", "type": "bool"}]}, {"py/tuple": ["noCheckVariantsOrder", {"flag": "--no_check_variants_order", "label": "Permit the use of unsorted input files", "type": "bool"}]}, {"py/tuple": ["fork", {"flag": "--fork ", "label": "Specify number of forks", "type": "int"}]}, {"py/tuple": ["vepCache", {"flag": "--cache", "label": "Enable use of cache", "type": "bool"}]}, {"py/tuple": ["vepBaseCacheDir", {"flag": "--dir ", "label": "Specify base cache/plugin directory", "type": "directory"}]}, {"py/tuple": ["vepCacheDir", {"flag": "--dir_cache ", "label": "Specify cache directory", "type": "directory"}]}, {"py/tuple": ["pluginDir", {"flag": "--dir_plugins ", "label": "Specify plugin directory", "type": "directory"}]}, {"py/tuple": ["offline", {"flag": "--offline", "label": "Enable offline mode", "type": "bool"}]}, {"py/tuple": ["fasta", {"flag": "--fasta ", "label": "Specify a FASTA file", "type": "file"}]}, {"py/tuple": ["refSeq", {"flag": "--refseq", "label": "Allow VEP to pick alternate cache directory for RefSeq", "type": "bool"}]}, {"py/tuple": ["merged", {"flag": "--merged", "label": "Use the merged Ensembl and RefSeq cache", "type": "bool"}]}, {"py/tuple": ["cacheVersion", {"flag": "--cache_version", "label": "Use a different cache version than the VEP version", "type": "bool"}]}, {"py/tuple": ["showCacheInfo", {"flag": "--show_cache_info", "label": "Show source version information for selected cache", "type": "bool"}]}, {"py/tuple": ["bufferSize", {"flag": "--buffer_size ", "label": "Set the internal buffer size", "type": "int"}]}, {"py/tuple": ["plugin", {"flag": "--plugin ", "label": "Use named plugin", "type": "str"}]}, {"py/tuple": ["custom", {"flag": "--custom ", "label": "Add custom annotation to the output", "type": "file"}]}, {"py/tuple": ["gff", {"flag": "--gff ", "label": "Use GFF transcript annotations from file", "type": "file"}]}, {"py/tuple": ["gtf", {"flag": "--gtf ", "label": "Use GTF transcript annotations from file", "type": "file"}]}, {"py/tuple": ["bam", {"flag": "--bam ", "label": "Use BAM file of seq alignments to correct transcript modules not derived from ref genome seq", "type": "file"}]}, {"py/tuple": ["useTranscriptRef", {"flag": "--use_transcript_ref", "label": "Force VEP to replace provided reference allele with seq derived from overlapped transcript", "type": "bool"}]}, {"py/tuple": ["customMultiAllelic", {"flag": "--custom_multi_allelic", "label": "Return all annotations for alleles", "type": "bool"}]}, {"py/tuple": ["vcf", {"flag": "--vcf", "label": "Write output in VCF format", "type": "bool"}]}, {"py/tuple": ["tab", {"flag": "--tab", "label": "Write output in tab-delimited format", "type": "bool"}]}, {"py/tuple": ["json", {"flag": "--json", "label": "Write output in JSON format", "type": "bool"}]}, {"py/tuple": ["compressOutput", {"flag": "--compress_output ", "label": "Write output compressed using either gzip or bgzip", "type": "str"}]}, {"py/tuple": ["fields", {"flag": "--fields ", "label": "Configure output format using comma separated list of fields", "type": "str"}]}, {"py/tuple": ["minimal", {"flag": "--minimal", "label": "Convert alleles to most minimal representation before consequence calculation", "type": "bool"}]}, {"py/tuple": ["variantClass", {"flag": "--variant_class", "label": "Output the Sequence Ontology variant class", "type": "bool"}]}, {"py/tuple": ["sift", {"flag": "--sift ", "label": "Predict whether amino acid substitution affect protein function [p|s|b]", "type": "str"}]}, {"py/tuple": ["polyphen", {"flag": "--polyphen ", "label": "Predict possible impact of amino acid substitution on structure and function of human protein [p|s|b]", "type": "str"}]}, {"py/tuple": ["humdiv", {"flag": "--humdiv", "label": "Retrieve humDiv PolyPhen prediction", "type": "bool"}]}, {"py/tuple": ["nearest", {"flag": "--nearest ", "label": "Retrieve transcript or gene with the nearest protein-coding transcription start site", "type": "str"}]}, {"py/tuple": ["distance", {"flag": "--distance ", "label": "Modify the distance up and/or downstream between a variant and transcript", "type": "str"}]}, {"py/tuple": ["overlaps", {"flag": "--overlaps", "label": "Report the proportion and length of a transcript overlapped by a structural variant", "type": "bool"}]}, {"py/tuple": ["genePhenotype", {"flag": "--gene_phenotype", "label": "Indicates if the overlapped gene is associated with phenotype, disease or trait", "type": "bool"}]}, {"py/tuple": ["regulatory", {"flag": "--regulatory", "label": "Look for overlaps with regulatory regions", "type": "bool"}]}, {"py/tuple": ["cellType", {"flag": "--cell_type ", "label": "Report only regulatory regions that are found in given cell types", "type": "str"}]}, {"py/tuple": ["individual", {"flag": "--individual ", "label": "Consider only alternate alleles present in genotypes of the specified individuals", "type": "str"}]}, {"py/tuple": ["phased", {"flag": "--phased", "label": "Force VCF genotypes to be interpreted as phased", "type": "bool"}]}, {"py/tuple": ["alleleNumber", {"flag": "--allele_number ", "label": "Identify allele number from VCF input", "type": "bool"}]}, {"py/tuple": ["showRefAllele", {"flag": "--show_ref_allele", "label": "Adds the reference allele in the output", "type": "bool"}]}, {"py/tuple": ["totalLength", {"flag": "--total_length", "label": "Given cDNA, CDS and protein positions as position/length", "type": "bool"}]}, {"py/tuple": ["vepNumbers", {"flag": "--numbers", "label": "Adds affected exon and intron numbering to output", "type": "bool"}]}, {"py/tuple": ["noEscape", {"flag": "--no_escape", "label": "Do not URI escape HGVS strings", "type": "bool"}]}, {"py/tuple": ["keepCsq", {"flag": "--keep_csq", "label": "Do not overwrite existing CSQ entry in VCF INFO field", "type": "bool"}]}, {"py/tuple": ["vcfInfoField", {"flag": "--vcf_info_field ", "label": "Change the name of the info key", "type": "str"}]}, {"py/tuple": ["vepTerms", {"flag": "--terms ", "label": "Type of consequence terms to output", "type": "str"}]}, {"py/tuple": ["noHeaders", {"flag": "--no_headers", "label": "Do not write header lines in output files", "type": "bool"}]}, {"py/tuple": ["shift3prime", {"flag": "--shift_3prime ", "label": "Right aligns all variants relative to associated transcripts", "type": "str"}]}, {"py/tuple": ["shiftGenomic", {"flag": "--shift_genomic ", "label": "Right aligns all variants, including intergenic variants", "type": "str"}]}, {"py/tuple": ["shiftLength", {"flag": "--shift_length", "label": "Reports distance each variant shifted when used with shift_3prime", "type": "bool"}]}, {"py/tuple": ["ccds", {"flag": "--ccds", "label": "Adds CCDS transcript identifier to the output", "type": "bool"}]}, {"py/tuple": ["hgvs", {"flag": "--hgvs", "label": "Add HGVS nomenclature based on Ensembl stable identifiers to the output", "type": "bool"}]}, {"py/tuple": ["vepSymbol", {"flag": "--symbol", "label": "Adds the gene symbol to the output", "type": "bool"}]}, {"py/tuple": ["vepDomains", {"flag": "--domains", "label": "Adds names of overlapping protein domains to output", "type": "bool"}]}, {"py/tuple": ["vepCanonical", {"flag": "--canonical", "label": "Adds a flag indicating if the transcript is the canonical transcript for the gene", "type": "bool"}]}, {"py/tuple": ["protein", {"flag": "--protein", "label": "Add the Ensembl protein identifier to the output where appropriate", "type": "bool"}]}, {"py/tuple": ["biotype", {"flag": "--biotype", "label": "Adds the biotype of the transcript or regulatory feature", "type": "bool"}]}, {"py/tuple": ["uniprot", {"flag": "--uniprot", "label": "Adds best match accession for translated protein products from three UniProt related databases", "type": "bool"}]}, {"py/tuple": ["tsl", {"flag": "--tsl", "label": "Adds the transcript support level for this transcript to the output", "type": "bool"}]}, {"py/tuple": ["shiftHgvs", {"flag": "--shift_hgvs ", "label": "Enable or disable 3' shifting of HGVS notations [0|1]", "type": "int"}]}, {"py/tuple": ["checkExisting", {"flag": "--check_existing", "label": "Check for existance of known variants co-located with input", "type": "bool"}]}, {"py/tuple": ["xrefRefseq", {"flag": "--xref_refseq", "label": "Output aligned RefSeq mRNA identifier for transcript", "type": "bool"}]}, {"py/tuple": ["vepFailed", {"flag": "--failed ", "label": "Include variants that have been flagged as failed [0|1]", "type": "int"}]}, {"py/tuple": ["flagPickAllele", {"flag": "--flag_pick_allele", "label": "As per --pick_allele, but adds PICK flag to chosen block of consequence data and retains others", "type": "bool"}]}, {"py/tuple": ["pickOrder", {"flag": "--pick order ", "label": "Customise the order of criteria applied when choosing a block of annotation data", "type": "str"}]}, {"py/tuple": ["pubmed", {"flag": "--pubmed", "label": "Report Pubmed IDs for publications that cite existing variant", "type": "bool"}]}, {"py/tuple": ["af", {"flag": "--af", "label": "Add global allele frequency (AF) from 1000 Genomes Phase 3 data for known co-located variant", "type": "bool"}]}, {"py/tuple": ["af1kg", {"flag": "--af_1kg", "label": "Add allele frequency from continental populations of 1000 Genomes Phase 3", "type": "bool"}]}, {"py/tuple": ["afEsp", {"flag": "--af_esp", "label": "Include allele frequency from NHLBI-ESP populations", "type": "bool"}]}, {"py/tuple": ["afGnomad", {"flag": "--af_gnomad", "label": "Include allele frequency from Genome Aggregation Database exome populations", "type": "bool"}]}]}]}, "command": ["./vep "], "autoMap": true, "runDockerMap": null, "persistentSettings": "all", "requiredParameters": ["inputFile", "outputFile"]}