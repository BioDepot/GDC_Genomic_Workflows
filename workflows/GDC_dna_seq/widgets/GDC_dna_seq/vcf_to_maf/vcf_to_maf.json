{"name": "vcf_to_maf", "description": "Convert a VCF into a MAF", "docker_image_name": "biodepot/vcf_to_maf", "docker_image_tag": "1.6.19__fbd89e9f", "priority": "100", "icon": null, "inputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["inputFile", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["refFasta", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["trigger", {"callback": null, "type": {"py/type": "builtins.str"}}]}, {"py/tuple": ["outputFile", {"callback": null, "type": {"py/type": "builtins.str"}}]}]}]}, "outputs": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["outputFile", {"default": null, "type": {"py/type": "builtins.str"}}]}]}]}, "volumes": null, "ports": null, "parameters": {"py/reduce": [{"py/type": "collections.OrderedDict"}, {"py/tuple": []}, null, null, {"py/tuple": [{"py/tuple": ["inputFile", {"flag": "--input-vcf ", "label": "Input VCF file", "type": "file list"}]}, {"py/tuple": ["outputFile", {"flag": "--output-maf ", "label": "Output MAF file", "type": "file list"}]}, {"py/tuple": ["inhibitVep", {"flag": "--inhibit-vep", "label": "Skip running VEP", "type": "bool"}]}, {"py/tuple": ["refFasta", {"flag": "--ref-fasta ", "label": "Reference fasta file", "type": "file"}]}, {"py/tuple": ["tmpDir", {"flag": "--tmp-dir ", "label": "Folder to retain intermediate VCFs after runtime", "type": "directory"}]}, {"py/tuple": ["tumorId", {"flag": "--tumor-id ", "label": "Tumor_Sample_Barcode to report in the MAF", "type": "str"}]}, {"py/tuple": ["normalId", {"flag": "--normal-id ", "label": "Matched_Norm_Sample_Barcode to report in the MAF", "type": "str"}]}, {"py/tuple": ["vcfTumorId", {"flag": "--vcf-tumor-id ", "label": "Tumor sample ID used in VCF's genotype columns", "type": "str"}]}, {"py/tuple": ["vcfNormalId", {"flag": "--vcf-normal-id ", "label": "Matched normal ID used in VCF's genotype columns", "type": "str"}]}, {"py/tuple": ["customEnst", {"flag": "--custom-enst ", "label": "List of custom ENST IDs that override canonical selection", "type": "text list"}]}, {"py/tuple": ["vepPath", {"default": "/usr/local/bin", "flag": "--vep-path ", "label": "Folder containing the vep script", "type": "str"}]}, {"py/tuple": ["vepData", {"default": "/data/vep", "flag": "--vep-data ", "label": "VEP's base cache/plugin directory", "type": "str"}]}, {"py/tuple": ["vepForks", {"flag": "--vep-forks ", "label": "Number of forked processes to use when running VEP", "type": "int"}]}, {"py/tuple": ["bufferSize", {"flag": "--buffer-size ", "label": "Number of variants VEP loads at a time", "type": "int"}]}, {"py/tuple": ["anyAllele", {"flag": "--any-allele", "label": "When reporting co-located variants, allow mismatched variant alleles too", "type": "bool"}]}, {"py/tuple": ["online", {"flag": "--online", "label": "Use useastdb.ensembl.org instead of local cache", "type": "bool"}]}, {"py/tuple": ["filterVcf", {"flag": "--filter-vcf ", "label": "A VCF for FILTER tag common_variant", "type": "str"}]}, {"py/tuple": ["maxFilterAc", {"flag": "--max-filter-ac ", "label": "Use tag common_variant if the filter-vcf reports a subpopulation AC higher than this", "type": "int"}]}, {"py/tuple": ["species", {"flag": "--species ", "label": "Ensembl-friendly name of species", "type": "str"}]}, {"py/tuple": ["ncbiBuild", {"flag": "--ncbi-build ", "label": "NCBI reference assembly of variants MAF", "type": "str"}]}, {"py/tuple": ["cacheVersion", {"flag": "--cache-version ", "label": "Version of offline cache to use with VEP", "type": "int"}]}, {"py/tuple": ["mafCenter", {"flag": "--maf-center ", "label": "Variant calling center to report in MAF", "type": "str"}]}, {"py/tuple": ["retainInfo", {"flag": "--retain-info ", "label": "Comma-delimited names of INFO fields to retain as extra columns in MAF", "type": "str"}]}, {"py/tuple": ["retainFmt", {"flag": "--retain-fmt ", "label": "Comma-delimited names of FORMAT fields to retain as extra columns in MAF", "type": "str"}]}, {"py/tuple": ["minHomVaf", {"flag": "--min-hom-vaf ", "label": "If GT undefined in VCF, minimum allele fraction to call a variant homozygous", "type": "double"}]}, {"py/tuple": ["remapChain", {"flag": "--remap-chain", "label": "Chain file to remap variants to a different assembly before running VEP", "type": "bool"}]}]}]}, "command": ["perl vcf2maf.pl "], "autoMap": true, "runDockerMap": null, "persistentSettings": "all", "requiredParameters": ["inputFile", "outputFile", "refFasta"]}